"""get rid of optional types

Revision ID: a0ccb5ace260
Revises:
Create Date: 2025-04-03 23:11:11.415917

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "a0ccb5ace260"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("DROP TABLE message CASCADE")
    op.execute("DROP TABLE itinerary CASCADE")
    op.execute("DROP TABLE account CASCADE")
    op.execute("DROP TABLE trip CASCADE")
    op.execute("DROP TABLE companion CASCADE")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "companion",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("trip_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("companion_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "status",
            postgresql.ENUM("confirmed", "pending", "declined", "canceled", name="companionstatus"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(["companion_id"], ["account.id"], name="companion_companion_id_fkey"),
        sa.ForeignKeyConstraint(["trip_id"], ["trip.id"], name="companion_trip_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="companion_pkey"),
    )
    op.create_table(
        "account",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('account_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("username", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("first_name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("last_name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("email", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("password", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="account_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "companions",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("trip_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("companion_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "status",
            postgresql.ENUM("confirmed", "pending", "declined", "canceled", name="companionstatus"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(["companion_id"], ["account.id"], name="companions_companion_id_fkey"),
        sa.ForeignKeyConstraint(["trip_id"], ["trip.id"], name="companions_trip_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="companions_pkey"),
    )
    op.create_table(
        "messages",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("trip_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("sender_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("message", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(["sender_id"], ["account.id"], name="messages_sender_id_fkey"),
        sa.ForeignKeyConstraint(["trip_id"], ["trip.id"], name="messages_trip_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="messages_pkey"),
    )
    op.create_table(
        "itineraries",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("trip_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("stop_number", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("location", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("arrival_date", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("departure_date", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(["trip_id"], ["trip.id"], name="itineraries_trip_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="itineraries_pkey"),
    )
    op.create_table(
        "trip",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('trip_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("initiator_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("start_date", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("end_date", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column(
            "vehicle",
            postgresql.ENUM(
                "car",
                "motorcycle",
                "bicycle",
                "scooter",
                "train",
                "bus",
                "plane",
                "boat",
                "walking",
                name="vehicletype",
            ),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column(
            "status",
            postgresql.ENUM("planned", "in_progress", "completed", "canceled", name="tripstatus"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(["initiator_id"], ["account.id"], name="trip_initiator_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="trip_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "itinerary",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("trip_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("stop_number", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("location", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("arrival_date", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("departure_date", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(["trip_id"], ["trip.id"], name="itinerary_trip_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="itinerary_pkey"),
    )
    op.create_table(
        "message",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("trip_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("sender_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("message", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(["sender_id"], ["account.id"], name="message_sender_id_fkey"),
        sa.ForeignKeyConstraint(["trip_id"], ["trip.id"], name="message_trip_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="message_pkey"),
    )
    # ### end Alembic commands ###
