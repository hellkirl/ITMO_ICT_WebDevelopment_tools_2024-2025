{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f","text":"<p>\u0420\u0430\u0431\u043e\u0442\u044b \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432 GitHub \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438.</p>"},{"location":"lab1/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161","text":""},{"location":"lab1/#_1","title":"\u0421\u0441\u044b\u043b\u043a\u0438","text":"<ul> <li>\u041b\u04201</li> <li>\u0417\u0430\u0434\u0430\u043d\u0438\u0435</li> </ul>"},{"location":"lab1/#_2","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>\u0420\u0430\u0431\u043e\u0442\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 API, \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u043e\u0435 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c FastAPI, \u043f\u043e \u0442\u0435\u043c\u0435 \"\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432 \u0432 \u043f\u0443\u0442\u0435\u0448\u0435\u0441\u0442\u0432\u0438\u0435\". \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0430\u044f \u0421\u0423\u0411\u0414: PostgreSQL.</p>"},{"location":"lab1/#api","title":"\u041c\u0435\u0442\u043e\u0434\u044b API","text":""},{"location":"lab1/#users","title":"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 (Users)","text":"<ul> <li> <p>GET <code>/users/</code> \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: \u041d\u0435\u0442.</p> </li> <li> <p>GET <code>/users/me</code> \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: \u041d\u0435\u0442.</p> </li> <li> <p>GET <code>/users/{user_id}</code> \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e \u0435\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: </p> </li> <li> <p><code>user_id</code> (path, integer): \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.</p> </li> <li> <p>PUT <code>/users/{user_id}</code> \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: </p> </li> <li> <p><code>user_id</code> (path, integer): \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0422\u0435\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430: AccountUpdate (JSON).</p> </li> <li> <p>DELETE <code>/users/{user_id}</code> \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: </p> </li> <li> <p><code>user_id</code> (path, integer): \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.</p> </li> <li> <p>POST <code>/users/new</code> \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0422\u0435\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430: Account (JSON).</p> </li> <li> <p>POST <code>/users/login</code> \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b (Query): </p> </li> <li><code>username</code> (string): \u0418\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.  </li> <li> <p><code>password</code> (string): \u041f\u0430\u0440\u043e\u043b\u044c.</p> </li> <li> <p>POST <code>/users/register</code> \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0422\u0435\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430: Account (JSON).</p> </li> <li> <p>POST <code>/users/change-password</code> \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0422\u0435\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430: PasswordChange (JSON).</p> </li> </ul>"},{"location":"lab1/#trips","title":"\u041f\u043e\u0435\u0437\u0434\u043a\u0438 (Trips)","text":"<ul> <li> <p>GET <code>/trips/</code> \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u043e\u0435\u0437\u0434\u043e\u043a. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: \u041d\u0435\u0442.</p> </li> <li> <p>GET <code>/trips/{trip_id}</code> \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u0435\u0437\u0434\u043a\u0438 \u043f\u043e \u0435\u0451 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: </p> </li> <li> <p><code>trip_id</code> (path, integer): \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u0435\u0437\u0434\u043a\u0438.</p> </li> <li> <p>PUT <code>/trips/{trip_id}</code> \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u0435\u0437\u0434\u043a\u0438. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: </p> </li> <li> <p><code>trip_id</code> (path, integer): \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u0435\u0437\u0434\u043a\u0438. \u0422\u0435\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430: Trip (JSON).</p> </li> <li> <p>DELETE <code>/trips/{trip_id}</code> \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0435\u0437\u0434\u043a\u0438. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: </p> </li> <li> <p><code>trip_id</code> (path, integer): \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u0435\u0437\u0434\u043a\u0438.</p> </li> <li> <p>POST <code>/trips/new</code> \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u043f\u043e\u0435\u0437\u0434\u043a\u0438. \u0422\u0435\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430: Trip (JSON).</p> </li> </ul>"},{"location":"lab1/#companions","title":"\u041f\u043e\u043f\u0443\u0442\u0447\u0438\u043a\u0438 (Companions)","text":"<ul> <li>GET <code>/companions/</code> \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u043e\u043f\u0443\u0442\u0447\u0438\u043a\u043e\u0432 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u043f\u043e\u0435\u0437\u0434\u043a\u0438. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b (Query): </li> <li> <p><code>trip_id</code> (integer): \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u0435\u0437\u0434\u043a\u0438.</p> </li> <li> <p>POST <code>/companions/</code> \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043f\u0443\u0442\u0447\u0438\u043a\u0430. \u0422\u0435\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430: Companion (JSON).</p> </li> <li> <p>PUT <code>/companions/{companion_id}</code> \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043f\u0443\u0442\u0447\u0438\u043a\u0430. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: </p> </li> <li> <p><code>companion_id</code> (path, integer): \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043f\u0443\u0442\u0447\u0438\u043a\u0430. \u0422\u0435\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430: Companion (JSON).</p> </li> <li> <p>DELETE <code>/companions/{companion_id}</code> \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043f\u0443\u0442\u0447\u0438\u043a\u0430. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: </p> </li> <li><code>companion_id</code> (path, integer): \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043f\u0443\u0442\u0447\u0438\u043a\u0430.</li> </ul>"},{"location":"lab1/#itineraries","title":"\u041c\u0430\u0440\u0448\u0440\u0443\u0442\u044b (Itineraries)","text":"<ul> <li>GET <code>/itineraries/{trip_id}</code> \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u043f\u043e\u0435\u0437\u0434\u043a\u0438. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: </li> <li> <p><code>trip_id</code> (path, integer): \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u0435\u0437\u0434\u043a\u0438.</p> </li> <li> <p>POST <code>/itineraries/</code> \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430. \u0422\u0435\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430: Itinerary (JSON).</p> </li> <li> <p>DELETE <code>/itineraries/{trip_id}/{itinerary_id}</code> \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: </p> </li> <li><code>trip_id</code> (path, integer): \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u0435\u0437\u0434\u043a\u0438.  </li> <li><code>itinerary_id</code> (path, integer): \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430.</li> </ul>"},{"location":"lab1/#messages","title":"\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (Messages)","text":"<ul> <li>GET <code>/messages/{trip_id}</code> \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u043f\u043e\u0435\u0437\u0434\u043a\u0438. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: </li> <li> <p><code>trip_id</code> (path, integer): \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u0435\u0437\u0434\u043a\u0438.</p> </li> <li> <p>POST <code>/messages/</code> \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u0435\u0437\u0434\u043a\u0438. \u0422\u0435\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430: Message (JSON).</p> </li> </ul>"},{"location":"lab1/#_3","title":"\u041c\u043e\u0434\u0435\u043b\u0438","text":"<pre><code>from enum import Enum\nimport datetime\nfrom typing import Optional, List\n\nfrom pydantic import BaseModel, EmailStr\nfrom sqlmodel import SQLModel, Field, Relationship\n\n\nclass TripStatus(str, Enum):\n    planned = \"planned\"\n    in_progress = \"in_progress\"\n    completed = \"completed\"\n    canceled = \"canceled\"\n\n\nclass VehicleType(str, Enum):\n    car = \"car\"\n    motorcycle = \"motorcycle\"\n    bicycle = \"bicycle\"\n    scooter = \"scooter\"\n    train = \"train\"\n    bus = \"bus\"\n    plane = \"plane\"\n    boat = \"boat\"\n    walking = \"walking\"\n\n\nclass CompanionStatus(str, Enum):\n    confirmed = \"confirmed\"\n    pending = \"pending\"\n    declined = \"declined\"\n    canceled = \"canceled\"\n\n\nclass AccountType(str, Enum):\n    user = \"user\"\n    admin = \"admin\"\n\n\nclass Account(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    username: str\n    first_name: str\n    last_name: str\n    email: EmailStr\n    password: Optional[str] = Field(default=None, sa_column_kwargs={\"nullable\": True})\n    description: Optional[str] = Field(default=None)\n    created_at: datetime.datetime = Field(\n        default_factory=datetime.datetime.utcnow, nullable=False\n    )\n    trips: List[\"Trip\"] = Relationship(back_populates=\"initiator\")\n    role: AccountType = Field(default=AccountType.user)\n\n\nclass AccountUpdate(BaseModel):\n    first_name: Optional[str]\n    last_name: Optional[str]\n    email: Optional[EmailStr]\n    description: Optional[str]\n\n\nclass Trip(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    initiator_id: Optional[int] = Field(default=None, foreign_key=\"account.id\")\n    start_date: Optional[datetime.datetime] = None\n    end_date: Optional[datetime.datetime] = None\n    vehicle: Optional[VehicleType] = None\n    description: Optional[str] = None\n    created_at: Optional[datetime.datetime] = None\n    status: Optional[TripStatus] = None\n\n    initiator: Optional[Account] = Relationship(back_populates=\"trips\")\n    companions: List[\"Companion\"] = Relationship(back_populates=\"trip\")\n    messages: List[\"Message\"] = Relationship(back_populates=\"trip\")\n    itineraries: List[\"Itinerary\"] = Relationship(back_populates=\"trip\")\n\n\nclass Companion(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    trip_id: int = Field(foreign_key=\"trip.id\")\n    companion_id: int = Field(foreign_key=\"account.id\")\n    status: CompanionStatus\n    created_at: datetime.datetime\n\n    trip: Trip = Relationship(back_populates=\"companions\")\n    companion: Account = Relationship()\n\n\nclass Message(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    trip_id: int = Field(foreign_key=\"trip.id\")\n    sender_id: int = Field(foreign_key=\"account.id\")\n    message: str\n    created_at: datetime.datetime\n\n    trip: Trip = Relationship(back_populates=\"messages\")\n    sender: Account = Relationship()\n\n\nclass Itinerary(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    trip_id: int = Field(foreign_key=\"trip.id\")\n    stop_number: int\n    location: str\n    arrival_date: Optional[datetime.datetime] = None\n    departure_date: Optional[datetime.datetime] = None\n    created_at: datetime.datetime\n\n    trip: Trip = Relationship(back_populates=\"itineraries\")\n</code></pre>"},{"location":"lab2/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162","text":""},{"location":"lab2/#_1","title":"\u0421\u0441\u044b\u043b\u043a\u0438","text":"<ul> <li>\u041b\u04202</li> <li>\u0417\u0430\u0434\u0430\u043d\u0438\u0435</li> </ul>"},{"location":"lab2/#_2","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>\u0412 \u044d\u0442\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u0431\u044b\u043b\u0438 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u044b \u043f\u043e\u0442\u043e\u043a\u0438, \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c.</p> <p>\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f:</p>"},{"location":"lab2/#1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1","text":""},{"location":"lab2/#_3","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f","text":"<p>\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 10000000000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.</p>"},{"location":"lab2/#threading","title":"Threading","text":"<pre><code>import threading\nimport time\n\n\ndef calculate_sum(start: int, end: int) -&gt; int:\n    return (end - start + 1) * (start + end) // 2\n\ndef worker(start: int, end: int, result_list: list, index: int):\n    result_list[index] = calculate_sum(start, end)\n\nif __name__ == \"__main__\":\n    N = 10_000_000_000_000\n    num_threads = 4\n    chunk = N // num_threads\n\n    results = [0] * num_threads\n    threads = []\n\n    t0 = time.perf_counter()\n    for i in range(num_threads):\n        s = i * chunk + 1\n        e = (i + 1) * chunk if i &lt; num_threads - 1 else N\n        th = threading.Thread(target=worker, args=(s, e, results, i))\n        th.start()\n        threads.append(th)\n\n    for th in threads:\n        th.join()\n    total_sum = sum(results)\n    t1 = time.perf_counter()\n\n    print(f\"Threading: sum = {total_sum}, time = {t1 - t0:.6f} s\")\n</code></pre>"},{"location":"lab2/#async","title":"Async","text":"<pre><code>import asyncio\nimport time\n\n\nasync def calculate_sum(start: int, end: int) -&gt; int:\n    return (end - start + 1) * (start + end) // 2\n\nasync def main():\n    N = 10_000_000_000_000\n    num_tasks = 4\n    chunk = N // num_tasks\n\n    tasks = []\n    for i in range(num_tasks):\n        s = i * chunk + 1\n        e = (i + 1) * chunk if i &lt; num_tasks - 1 else N\n        tasks.append(asyncio.create_task(calculate_sum(s, e)))\n\n    partials = await asyncio.gather(*tasks)\n    return sum(partials)\n\nif __name__ == \"__main__\":\n    t0 = time.perf_counter()\n    total_sum = asyncio.run(main())\n    t1 = time.perf_counter()\n    print(f\"Asyncio: sum = {total_sum}, time = {t1 - t0:.6f} s\")\n</code></pre>"},{"location":"lab2/#multiprocessing","title":"Multiprocessing","text":"<pre><code>import multiprocessing as mp\nimport time\n\n\ndef calculate_sum(start: int, end: int) -&gt; int:\n    return (end - start + 1) * (start + end) // 2\n\ndef worker(args):\n    return calculate_sum(*args)\n\nif __name__ == \"__main__\":\n    N = 10_000_000_000_000\n    num_procs = mp.cpu_count()\n    chunk = N // num_procs\n\n    args_list = []\n    for i in range(num_procs):\n        s = i * chunk + 1\n        e = (i + 1) * chunk if i &lt; num_procs - 1 else N\n        args_list.append((s, e))\n\n    t0 = time.perf_counter()\n    with mp.Pool(processes=num_procs) as pool:\n        results = pool.map(worker, args_list)\n    total_sum = sum(results)\n    t1 = time.perf_counter()\n\n    print(f\"Multiprocessing: sum = {total_sum}, time = {t1 - t0:.6f} s\")\n</code></pre>"},{"location":"lab2/#_4","title":"\u0412\u044b\u0432\u043e\u0434","text":"<p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b:</p> Threading Async Multiprocessing Time 0.000315s 0.000345s 0.077035s <p>\u0412\u044b\u0432\u043e\u0434: \u043f\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043f\u043e\u0442\u043e\u043a\u0438 \u0434\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439, \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u043e\u0442\u043e\u043a\u0438 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u043b\u0438 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430 \u0441\u0447\u0451\u0442 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0445 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u0412 \u0441\u0432\u043e\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c, asyncio \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0432\u0435\u0440\u0445\u0435\u0434 \u043d\u0430 \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0440\u0443\u0442\u0438\u043d, \u0430 multiprocessing \u0442\u0440\u0430\u0442\u0438\u0442 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0430 \u0444\u043e\u0440\u043a \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u0438 \u043c\u0435\u0436\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435.</p>"},{"location":"lab2/#no2_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162","text":""},{"location":"lab2/#_5","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f","text":"<p>\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.</p>"},{"location":"lab2/#threading_1","title":"Threading","text":"<pre><code>import os\nimport sys\nimport threading\nimport time\nimport requests\nfrom bs4 import BeautifulSoup\n\nsys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\nfrom db import create_book_record\nfrom urls import MAX_PAGES, url\n\n\ndef parse_and_save(url: str):\n    try:\n        print(f\"Fetching {url}...\")\n        response = requests.get(url, timeout=5)\n        soup = BeautifulSoup(response.text, \"html.parser\")\n        book_items = soup.find_all(\"li\", class_=\"book-item__item book-item--full\")\n        for book in book_items:\n            title = book.find(\"a\", class_=\"book-item__title\")\n            author = book.find(\"a\", class_=\"book-item__author\")\n            isbn = book.find(\"table\", class_=\"book-item-edition\")\n            description = book.find(\"div\", id=\"lenta-card__text-edition-full\")\n            if description is None:\n                description = book.find(\"div\", id=\"lenta-card__text-edition-escaped\")\n            title_text = title.get_text(strip=True) if title else None\n            author_text = author.get_text(strip=True) if author else None\n            isbn_text = None\n            if isbn:\n                td = isbn.find(\"td\", class_=None)\n                isbn_text = td.get_text(strip=True) if td else None\n            description_text = description.get_text(strip=True) if description else None\n            create_book_record(title_text, author_text, isbn_text, description_text)\n    except requests.exceptions.RequestException as e:\n        print(f\"Error fetching {url}: {e}\")\n    except Exception as e:\n        print(f\"Error parsing {url}: {e}\")\n\n\ndef worker(url: str, result_list: list, index: int):\n    result_list[index] = parse_and_save(url)\n\n\nif __name__ == \"__main__\":\n    results = [None] * MAX_PAGES\n    threads = []\n\n    t0 = time.perf_counter()\n    for i in range(1, MAX_PAGES + 1):\n        page_url = url.format(page=i)\n        th = threading.Thread(target=worker, args=(page_url, results, i - 1))\n        th.start()\n        threads.append(th)\n\n    for th in threads:\n        th.join()\n    t1 = time.perf_counter()\n\n    print(f\"Threading: time = {t1 - t0:.2f} s\")\n</code></pre> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0432 \u043e\u0434\u043d\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435. \u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043d\u0430 \u0432\u0440\u0435\u043c\u044f I/O (\u043e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430), \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u0431\u0449\u0430\u044f \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0430 \u0441\u0435\u0442\u0435\u0432\u044b\u043c\u0438 \u0437\u0430\u0434\u0435\u0440\u0436\u043a\u0430\u043c\u0438.</p>"},{"location":"lab2/#async_1","title":"Async","text":"<pre><code>import os\nimport sys\nimport time\nimport asyncio\nimport aiohttp\nimport asyncpg\nfrom bs4 import BeautifulSoup\nfrom dotenv import load_dotenv\n\nsys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\nfrom urls import MAX_PAGES, url\n\nload_dotenv()\nDATABASE_URI = os.environ[\"DATABASE_URI\"]\n\n\nasync def create_book_record(\n    conn, title: str, author: str, isbn: str, description: str\n) -&gt; None:\n    await conn.execute(\n        \"\"\"\n        INSERT INTO books (title, author, isbn, description)\n        VALUES ($1, $2, $3, $4)\n        \"\"\",\n        title,\n        author,\n        isbn,\n        description,\n    )\n\n\nasync def parse_and_save(session, pool, url: str):\n    try:\n        print(f\"Fetching {url}...\")\n        async with session.get(url, timeout=5) as response:\n            text = await response.text()\n            soup = BeautifulSoup(text, \"html.parser\")\n            book_items = soup.find_all(\"li\", class_=\"book-item__item book-item--full\")\n            async with pool.acquire() as conn:\n                for book in book_items:\n                    title = book.find(\"a\", class_=\"book-item__title\")\n                    author = book.find(\"a\", class_=\"book-item__author\")\n                    isbn = book.find(\"table\", class_=\"book-item-edition\")\n                    description = book.find(\"div\", id=\"lenta-card__text-edition-full\")\n                    if description is None:\n                        description = book.find(\n                            \"div\", id=\"lenta-card__text-edition-escaped\"\n                        )\n                    title_text = title.get_text(strip=True) if title else None\n                    author_text = author.get_text(strip=True) if author else None\n                    isbn_text = None\n                    if isbn:\n                        td = isbn.find(\"td\", class_=None)\n                        isbn_text = td.get_text(strip=True) if td else None\n                    description_text = (\n                        description.get_text(strip=True) if description else None\n                    )\n                    await create_book_record(\n                        conn, title_text, author_text, isbn_text, description_text\n                    )\n    except Exception as e:\n        print(f\"Error fetching/parsing {url}: {e}\")\n\n\nasync def main():\n    urls_to_fetch = [url.format(page=i) for i in range(1, MAX_PAGES + 1)]\n    t0 = time.perf_counter()\n    pool = await asyncpg.create_pool(DATABASE_URI, min_size=2, max_size=10)\n    async with aiohttp.ClientSession() as session:\n        tasks = [parse_and_save(session, pool, u) for u in urls_to_fetch]\n        await asyncio.gather(*tasks)\n    await pool.close()\n    t1 = time.perf_counter()\n    print(f\"Async: time = {t1 - t0:.2f} s\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <p>\u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e aiohttp \u0438 asyncpg \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0443\u043b \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 \u0438 \u043d\u0435\u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043a HTTP \u0438 \u0411\u0414. \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043a\u043e\u0440\u0443\u0442\u0438\u043d\u044b \u0443\u0441\u043f\u0435\u0432\u0430\u044e\u0442 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0430\u0442\u044c\u0441\u044f \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f I/O, \u0434\u043e\u0441\u0442\u0438\u0433\u0430\u0435\u0442\u0441\u044f \u0432\u044b\u0441\u043e\u043a\u0430\u044f \u043a\u043e\u043d\u043a\u0443\u0440\u0440\u0435\u043d\u0446\u0438\u044f \u0431\u0435\u0437 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043b\u0438\u0448\u043d\u0438\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432/\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432.</p>"},{"location":"lab2/#multiprocessing_1","title":"Multiprocessing","text":"<pre><code>import os\nimport sys\nimport time\nimport requests\nfrom bs4 import BeautifulSoup\nfrom multiprocessing import Pool\n\nsys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\nfrom db import create_book_record\nfrom urls import MAX_PAGES, url\n\n\ndef parse_and_save(url: str):\n    try:\n        print(f\"Fetching {url}...\")\n        response = requests.get(url, timeout=5)\n        soup = BeautifulSoup(response.text, \"html.parser\")\n        book_items = soup.find_all(\"li\", class_=\"book-item__item book-item--full\")\n        for book in book_items:\n            title = book.find(\"a\", class_=\"book-item__title\")\n            author = book.find(\"a\", class_=\"book-item__author\")\n            isbn = book.find(\"table\", class_=\"book-item-edition\")\n            description = book.find(\"div\", id=\"lenta-card__text-edition-full\")\n            if description is None:\n                description = book.find(\"div\", id=\"lenta-card__text-edition-escaped\")\n            title_text = title.get_text(strip=True) if title else None\n            author_text = author.get_text(strip=True) if author else None\n            isbn_text = None\n            if isbn:\n                td = isbn.find(\"td\", class_=None)\n                isbn_text = td.get_text(strip=True) if td else None\n            description_text = description.get_text(strip=True) if description else None\n            create_book_record(title_text, author_text, isbn_text, description_text)\n    except requests.exceptions.RequestException as e:\n        print(f\"Error fetching {url}: {e}\")\n    except Exception as e:\n        print(f\"Error parsing {url}: {e}\")\n\n\ndef worker(url: str):\n    parse_and_save(url)\n\n\nif __name__ == \"__main__\":\n    urls_to_fetch = [url.format(page=i) for i in range(1, MAX_PAGES + 1)]\n\n    t0 = time.perf_counter()\n    with Pool(processes=os.cpu_count()) as pool:\n        pool.map(worker, urls_to_fetch)\n    t1 = time.perf_counter()\n\n    print(f\"Multiprocessing: time = {t1 - t0:.2f} s\")\n</code></pre> <p>\u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e \u0438 \u043a\u0430\u0436\u0434\u044b\u0439 \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043d\u0430 I/O \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e. \u042d\u0442\u043e \u0434\u0430\u0451\u0442 \u0432\u044b\u0438\u0433\u0440\u044b\u0448 \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438 (\u0437\u0430 \u0441\u0447\u0451\u0442 \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u0439 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044f GIL), \u043d\u043e \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b \u043d\u0430 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u044e\u0442 \u043f\u0440\u0438\u0440\u043e\u0441\u0442.</p>"},{"location":"lab2/#_6","title":"\u0412\u044b\u0432\u043e\u0434","text":"<p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b:</p> Threading Async Multiprocessing Time 85.67s 10.17 36.51s <p>\u0412\u044b\u0432\u043e\u0434: \u0434\u043b\u044f I/O\u2011bound \u0437\u0430\u0434\u0430\u0447 (\u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431\u2011\u0441\u0442\u0440\u0430\u043d\u0438\u0446, \u0437\u0430\u043f\u0438\u0441\u044c \u0432 \u0411\u0414) \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. Multiprocessing \u0438\u043c\u0435\u0435\u0442 \u0441\u043c\u044b\u0441\u043b \u043f\u0440\u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f\u0445 CPU\u2011bound, \u0430 threading \u0432 Python \u0434\u043b\u044f I/O\u2011bound \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d GIL \u0438 \u0434\u0430\u0451\u0442 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0440\u043e\u0441\u0442.</p>"},{"location":"lab3/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163","text":""},{"location":"lab3/#_1","title":"\u0421\u0441\u044b\u043b\u043a\u0438","text":"<ul> <li>\u041b\u04203</li> <li>\u0417\u0430\u0434\u0430\u043d\u0438\u0435</li> </ul>"},{"location":"lab3/#_2","title":"\u0426\u0435\u043b\u044c","text":"<p>\u041d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u044b\u0432\u0430\u0442\u044c FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 Docker, \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0447\u0435\u0440\u0435\u0437 API \u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.</p>"},{"location":"lab3/#_3","title":"\u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b","text":""},{"location":"lab3/#1-fastapi-docker","title":"\u041f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0430 1: \u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 Docker","text":"<ol> <li>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 <code>/parse</code> \u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0435, \u0447\u0442\u043e\u0431\u044b \u0431\u044b\u043b\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u043c.</li> </ol> <pre><code>@app.post(\"/parse\")\nasync def parse_users(\n    session: AsyncSession = Depends(get_async_session),\n    pages_to_parse: int = 1,\n) -&gt; list[dict]:\n    results = await parse(pages_to_parse)\n    all_users = []\n    for _, users in results:\n        if not users:\n            continue\n        for user in users:\n            name = user.get(\"name\") or \"\"\n            name_parts = name.split(maxsplit=2)\n            name_parts = name.split()\n            last_name = name_parts[0] if len(name_parts) &gt; 0 else \"\"\n            first_name = name_parts[1] if len(name_parts) &gt; 1 else \"\"\n            await create_parsed_user(\n                session,\n                username=user.get(\"username\") or \"\",\n                first_name=first_name,\n                last_name=last_name,\n                email=user.get(\"email\") or \"\",\n            )\n            all_users.append(user)\n    if not all_users:\n        raise HTTPException(status_code=404, detail=\"No users found\")\n    return all_users\n</code></pre> <ol> <li> <p>\u0414\u043b\u044f \u0438\u0437\u043e\u043b\u044f\u0446\u0438\u0438 \u0438 \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 Dockerfile'\u044b \u0434\u043b\u044f FastAPI-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u043f\u0430\u0440\u0441\u0435\u0440\u0430. \u0412 Dockerfile'\u0430\u0445 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438, \u043a\u043e\u043f\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434, \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0440\u0430\u0431\u043e\u0447\u0430\u044f \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f \u0438 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.</p> </li> <li> <p>\u0412 Docker Compose \u0444\u0430\u0439\u043b\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0441\u0435\u0440\u0432\u0438\u0441\u044b \u0434\u043b\u044f FastAPI-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u043f\u0430\u0440\u0441\u0435\u0440\u0430, \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 Postgres. \u0414\u043b\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d volume \u0434\u043b\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0436\u0434\u0443 \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0443\u0441\u043a\u0430\u043c\u0438 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u043e\u0432. \u0412\u0441\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u044b \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u044b \u0432 \u043e\u0434\u043d\u0443 \u0441\u0435\u0442\u044c \u0434\u043b\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0434\u0440\u0443\u0433 \u0441 \u0434\u0440\u0443\u0433\u043e\u043c \u043f\u043e \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u043c \u0438\u043c\u0435\u043d\u0430\u043c.</p> </li> </ol>"},{"location":"lab3/#2-fastapi","title":"\u041f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0430 2: \u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI","text":"<ol> <li>\u0412 FastAPI-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d reverse proxy \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043f\u0435\u0440\u0435\u0441\u044b\u043b\u0430\u0435\u0442 \u0438\u0445 \u043d\u0430 \u0441\u0435\u0440\u0432\u0438\u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u0430. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 httpx. \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u0442\u0435\u043b\u043e \u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438, \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u0445 \u043d\u0430 \u043f\u0430\u0440\u0441\u0435\u0440, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u043e\u0442\u0432\u0435\u0442 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439. \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0447\u0435\u0440\u0435\u0437 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 API, \u043d\u0435 \u0437\u043d\u0430\u044f \u0435\u0433\u043e \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430.</li> </ol> <pre><code>@router.post(\"/\")\nasync def proxy_parse(\n    request: Request,\n    pages_to_parse: int = 1,\n):\n    async with httpx.AsyncClient(timeout=None) as client:\n        body = await request.body()\n        headers = dict(request.headers)\n        resp = await client.post(\n            PARSER_URL,\n            content=body,\n            headers=headers,\n            params={\"pages_to_parse\": pages_to_parse},\n        )\n        return Response(\n            content=resp.content, status_code=resp.status_code, headers=resp.headers\n        )\n</code></pre>"},{"location":"lab3/#3-fastapi","title":"\u041f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0430 3: \u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI \u0447\u0435\u0440\u0435\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u044c","text":"<ol> <li> <p>\u0414\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u0434\u0430\u0447 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d Celery \u0438 Redis (\u0431\u0440\u043e\u043a\u0435\u0440 \u0438 backend \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432). Celery \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0444\u043e\u043d\u0435, \u043d\u0435 \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u043e\u0442\u043e\u043a \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.</p> </li> <li> <p>\u0412 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0430 Celery-\u0437\u0430\u0434\u0430\u0447\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u0417\u0430\u0434\u0430\u0447\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u043a\u0430\u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438 \u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0435\u0441\u0441\u0438\u0435\u0439 SQLAlchemy.</p> </li> <li> <p>\u0412 \u043f\u0430\u0440\u0441\u0435\u0440 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c (<code>/parse/async</code>) \u0438 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e task_id (<code>/parse/async/status/{task_id}</code>). \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u0435 reverse proxy \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c FastAPI-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438, \u0447\u0442\u043e\u0431\u044b \u043a\u043b\u0438\u0435\u043d\u0442 \u043c\u043e\u0433 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0441 \u043e\u0434\u043d\u0438\u043c API.</p> </li> <li> <p>\u0412 Docker Compose \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u0441\u0435\u0440\u0432\u0438\u0441\u044b \u0434\u043b\u044f Redis \u0438 Celery worker. Celery worker \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0435 \u0438 \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0437\u0430\u0434\u0430\u0447, \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044f \u0438\u0445 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e \u043e\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.</p> </li> </ol>"},{"location":"lab3/#_4","title":"\u0412\u044b\u0432\u043e\u0434","text":"<p>\u0412 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u044f \u043f\u043e\u043b\u0443\u0447\u0438\u043b \u043e\u043f\u044b\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 Celery \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0432 Python.</p>"}]}